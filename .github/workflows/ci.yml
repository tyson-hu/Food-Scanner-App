name: CI

on:
  pull_request:
    branches: [ master, main ]
  push:
    branches: [ master ]

# Cancel older runs for the same PR/branch when a new commit lands
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      code: ${{ steps.filter.outputs.code }}
      project: ${{ steps.filter.outputs.project }}
      ci: ${{ steps.filter.outputs.ci }}
      linttools: ${{ steps.filter.outputs.linttools }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            docs:
              - '**/*.md'
              - 'docs/**'
              - 'LICENSE*'
              - '.github/ISSUE_TEMPLATE/**'
              - '.github/PULL_REQUEST_TEMPLATE*'
            ci:
              - '.github/workflows/**'
            linttools:
              - '.swiftlint.yml'
              - '.swiftformat'
              - '.swift-format'
            project:
              - '**/*.xcodeproj/**'
              - '**/*.xcworkspace/**'
              - '**/*.pbxproj'
              - '**/*.xcscheme'
              - '**/*.xcconfig'
              - '**/*.xctestplan'
              - '**/*.entitlements'
              - '**/*.xcprivacy'
            code:
              - '**/*.swift'
              - '**/*.plist'
              - '**/*.strings'
              - '**/*.xcassets/**'
              - 'Package.swift'
              - 'Package.resolved'
              - 'Food Scanner/**'
              - 'FoodScannerTests/**'
              - 'FoodScannerUITests/**'
              - '!docs/**'
              - '!**/*.md'

  gate:
    name: CI gate
    needs: changes
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - run: |
          echo "docs=${{ needs.changes.outputs.docs }}" >> $GITHUB_STEP_SUMMARY
          echo "code=${{ needs.changes.outputs.code }}" >> $GITHUB_STEP_SUMMARY
          echo "project=${{ needs.changes.outputs.project }}" >> $GITHUB_STEP_SUMMARY
          echo "ci=${{ needs.changes.outputs.ci }}" >> $GITHUB_STEP_SUMMARY
          echo "linttools=${{ needs.changes.outputs.linttools }}" >> $GITHUB_STEP_SUMMARY

  build-test:
    name: Build & Unit Tests (fast)
    needs: [changes, gate]
    if: ${{ needs.changes.outputs.code == 'true' || needs.changes.outputs.project == 'true' || needs.changes.outputs.ci == 'true' || needs.changes.outputs.linttools == 'true' }}
    runs-on: macos-latest
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v4

      - name: Setup Xcode 26
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '26.0.0'

      - name: Init Xcode once
        run: xcodebuild -runFirstLaunch || true

      - name: Cache SPM
        uses: actions/cache@v4
        with:
          path: |
            ~/.swiftpm
            ~/Library/Caches/org.swift.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}-xcode-26.0
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Cache DerivedData
        uses: actions/cache@v4
        with:
          path: ./DerivedData
          key: ${{ runner.os }}-dd-${{ hashFiles('**/Package.resolved', '**/*.xctestplan', '**/*.pbxproj', '**/*.xcscheme', '**/*.xcconfig') }}-xcode-26.0
          restore-keys: |
            ${{ runner.os }}-dd-

      - name: Resolve packages
        run: xcodebuild -resolvePackageDependencies -scheme "Food Scanner"
      
      - name: Preboot iOS 26 (create fresh iPhone 16; robust detection)
        id: preboot
        shell: bash
        run: |
          set -euo pipefail
          
          # Clean up existing simulators
          echo "Cleaning up existing simulators..."
          xcrun simctl shutdown all || true
          xcrun simctl delete unavailable || true
          sleep 2
          
          # Find iOS 26 runtime
          echo "Finding iOS 26 runtime..."
          RUNTIME=$(xcrun simctl list -j runtimes | python3 -c "import sys, json; data = json.load(sys.stdin); [print(r['identifier']) for r in data.get('runtimes', []) if r.get('platform') == 'iOS' and str(r.get('version', '')).startswith('26') and r.get('identifier') and r.get('isAvailable', True)]")
          
          if [ -z "$RUNTIME" ]; then
            echo "::error::Could not find iOS 26 runtime"
            xcrun simctl list runtimes
            exit 1
          fi
          echo "Using runtime: $RUNTIME"
          
          # Find iPhone 16 device type
          echo "Finding iPhone 16 device type..."
          DEVTYPE=$(xcrun simctl list -j devicetypes | python3 -c "import sys, json; data = json.load(sys.stdin); [print(d['identifier']) for d in data.get('devicetypes', []) if d.get('name') == 'iPhone 16' and d.get('identifier')]")
          
          if [ -z "$DEVTYPE" ]; then
            echo "::error::Device type 'iPhone 16' not found"
            xcrun simctl list devicetypes | grep iPhone
            exit 1
          fi
          echo "Using device type: $DEVTYPE"
          
          # Create simulator
          echo "Creating simulator..."
          NAME="CI-iPhone-16-$(date +%s)"
          UDID=$(xcrun simctl create "$NAME" "$DEVTYPE" "$RUNTIME")
          
          if [ -z "$UDID" ]; then
            echo "::error::Failed to create simulator"
            exit 1
          fi
          echo "Created simulator: $UDID"
          
          # Boot simulator
          echo "Booting simulator..."
          xcrun simctl boot "$UDID"
          
          # Wait for boot
          echo "Waiting for simulator to boot..."
          for i in $(seq 1 120); do
            if xcrun simctl list devices | grep -q "${UDID}) (Booted"; then
              echo "Simulator booted successfully after ${i} seconds"
              break
            fi
            if [ $i -eq 120 ]; then
              echo "::error::Simulator boot timeout after 120 seconds"
              xcrun simctl list devices
              exit 1
            fi
            sleep 1
          done
          
          # Verify boot status
          if ! xcrun simctl list devices | grep -q "${UDID}) (Booted"; then
            echo "::error::Simulator verification failed"
            xcrun simctl list devices
            exit 1
          fi
          
          # Additional stability check
          echo "Waiting for simulator to be fully ready..."
          sleep 10
          
          # Test simulator responsiveness
          if ! xcrun simctl list devices | grep -q "${UDID}) (Booted"; then
            echo "::error::Simulator became unresponsive after boot"
            xcrun simctl list devices
            exit 1
          fi
          
          echo "DEST_ID=${UDID}" >> "$GITHUB_ENV"
          echo "UDID=${UDID}" >> "$GITHUB_OUTPUT"

      - name: Build & Unit Tests (Offline CI plan, no coverage)
        timeout-minutes: 15
        shell: bash
        run: |
          set -eo pipefail
          
          # Use the enhanced CI test runner script with offline configuration
          ./scripts/ci-test-runner.sh "$DEST_ID" "./DerivedData"

      - name: Cleanup Simulators
        if: always()
        shell: bash
        run: |
          echo "Cleaning up simulators..."
          xcrun simctl shutdown all || true
          xcrun simctl delete all || true
          echo "Simulator cleanup completed"

  lint:
    name: Lint (SwiftFormat + SwiftLint)
    needs: [changes, gate]
    if: ${{ needs.changes.outputs.code == 'true' || needs.changes.outputs.project == 'true' || needs.changes.outputs.linttools == 'true' || needs.changes.outputs.ci == 'true' }}
    runs-on: macos-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - name: Install SwiftLint & SwiftFormat
        run: brew install swiftlint swiftformat
      - name: SwiftFormat (lint only)
        run: |
          swiftformat --lint "Food Scanner"
          swiftformat --lint "FoodScannerTests"
          swiftformat --lint "FoodScannerUITests"
      - name: SwiftLint (strict)
        run: swiftlint --strict

  guards:
    name: Guards (no TODO/FIXME, no legacy APIs)
    needs: [changes, gate]
    if: ${{ needs.changes.outputs.code == 'true' || needs.changes.outputs.project == 'true' || needs.changes.outputs.ci == 'true' }}
    runs-on: macos-latest
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v4
      - name: Fail on TODO/FIXME
        run: |
          if grep -RIn --exclude-dir=.build --exclude-dir=DerivedData -E 'TODO|FIXME' "Food Scanner" FoodScannerTests; then
            echo "::error::Found TODO/FIXME. Please resolve or annotate."; exit 1; fi
      - name: Ban legacy APIs
        run: |
          if grep -RIn -E 'UIWebView|NSURLConnection' "Food Scanner"; then
            echo "::error::Legacy API detected."; exit 1; fi

  codeql:
    name: CodeQL (Swift) â€” pinned to Xcode 16
    needs: [changes, gate]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' && (needs.changes.outputs.code == 'true' || needs.changes.outputs.project == 'true') }}
    runs-on: macos-latest
    timeout-minutes: 30
    permissions:
      security-events: write
      contents: read
      actions: read
    steps:
      - uses: actions/checkout@v4
      - name: Setup Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'
      - name: Init CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: swift
          build-mode: manual
      - name: Resolve packages
        run: xcodebuild -resolvePackageDependencies -scheme "Food Scanner"
      - name: Build for CodeQL (compile only)
        run: |
          set -eo pipefail
          xcodebuild \
            -scheme "Food Scanner" \
            -sdk iphonesimulator \
            -destination 'generic/platform=iOS Simulator' \
            -destination-timeout 60 \
            -configuration Debug \
            -derivedDataPath ./DerivedData \
            CODE_SIGNING_ALLOWED=NO \
            build 2>&1 | grep -v "appintentsmetadataprocessor.*warning: Metadata extraction skipped" | xcpretty
      - name: Analyze
        uses: github/codeql-action/analyze@v3
