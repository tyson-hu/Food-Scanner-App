name: CI

on:
  pull_request:
    branches: [ master, main ]
  push:
    branches: [ master ]

# Cancel older runs for the same PR/branch when a new commit lands
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      code: ${{ steps.filter.outputs.code }}
      project: ${{ steps.filter.outputs.project }}
      ci: ${{ steps.filter.outputs.ci }}
      linttools: ${{ steps.filter.outputs.linttools }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            docs:
              - '**/*.md'
              - 'docs/**'
              - 'LICENSE*'
              - '.github/ISSUE_TEMPLATE/**'
              - '.github/PULL_REQUEST_TEMPLATE*'
            ci:
              - '.github/workflows/**'
            linttools:
              - '.swiftlint.yml'
              - '.swiftformat'
              - '.swift-format'
            project:
              - '**/*.xcodeproj/**'
              - '**/*.xcworkspace/**'
              - '**/*.pbxproj'
              - '**/*.xcscheme'
              - '**/*.xcconfig'
              - '**/*.xctestplan'
              - '**/*.entitlements'
              - '**/*.xcprivacy'
            code:
              - '**/*.swift'
              - '**/*.plist'
              - '**/*.strings'
              - '**/*.xcassets/**'
              - 'Package.swift'
              - 'Package.resolved'
              - 'Food Scanner/**'
              - 'FoodScannerTests/**'
              - 'FoodScannerUITests/**'
              - '!docs/**'
              - '!**/*.md'

  gate:
    name: CI gate
    needs: changes
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - run: |
          echo "docs=${{ needs.changes.outputs.docs }}" >> $GITHUB_STEP_SUMMARY
          echo "code=${{ needs.changes.outputs.code }}" >> $GITHUB_STEP_SUMMARY
          echo "project=${{ needs.changes.outputs.project }}" >> $GITHUB_STEP_SUMMARY
          echo "ci=${{ needs.changes.outputs.ci }}" >> $GITHUB_STEP_SUMMARY
          echo "linttools=${{ needs.changes.outputs.linttools }}" >> $GITHUB_STEP_SUMMARY

  build-test:
    name: Build & Unit Tests (fast)
    needs: [changes, gate]
    if: ${{ needs.changes.outputs.code == 'true' || needs.changes.outputs.project == 'true' || needs.changes.outputs.ci == 'true' || needs.changes.outputs.linttools == 'true' }}
    runs-on: macos-latest
    timeout-minutes: 12
    steps:
      - uses: actions/checkout@v4

      - name: Setup Xcode 26
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '26.0.0'

      - name: Init Xcode once
        run: xcodebuild -runFirstLaunch || true

      - name: Cache SPM
        uses: actions/cache@v4
        with:
          path: |
            ~/.swiftpm
            ~/Library/Caches/org.swift.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}-xcode-26.0
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Cache DerivedData
        uses: actions/cache@v4
        with:
          path: ./DerivedData
          key: ${{ runner.os }}-dd-${{ hashFiles('**/Package.resolved', '**/*.xctestplan', '**/*.pbxproj', '**/*.xcscheme', '**/*.xcconfig') }}-xcode-26.0
          restore-keys: |
            ${{ runner.os }}-dd-

      - name: Resolve packages
        run: xcodebuild -resolvePackageDependencies -scheme "Food Scanner"

      - name: Preboot iOS 26 (create fresh iPhone 16 on iOS-26 only)
        id: preboot
        shell: bash
        run: |
          set -euo pipefail
          xcrun simctl shutdown all || true
      
          echo "== Runtimes (raw) =="
          xcrun simctl list runtimes
      
          # Pick an available iOS 26 runtime via JSON (no brittle grep)
          RUNTIME=$(
            xcrun simctl list -j runtimes \
            | /usr/bin/python3 - <<'PY'
          import sys, json
          data=json.load(sys.stdin)
          for r in data.get("runtimes", []):
              if r.get("platform")=="iOS" and str(r.get("version","")).startswith("26") and r.get("isAvailable", True):
                  print(r.get("identifier"))
                  break
          PY
          )
          if [ -z "${RUNTIME:-}" ]; then
            echo "::error::No available iOS 26 runtime found in simctl JSON."
            xcrun simctl list -j runtimes
            exit 1
          fi
          echo "Using runtime: $RUNTIME"
      
          NAME="CI-iPhone-16-$(date +%s)"
          UDID=$(xcrun simctl create "$NAME" "iPhone 16" "$RUNTIME")
          echo "Created device: $UDID"
      
          boot_try () { xcrun simctl boot "$1" || true; xcrun simctl bootstatus "$1" -b -t 120; }
          if ! boot_try "$UDID"; then
            echo "Boot timed out. Erasing and retrying…"
            xcrun simctl shutdown "$UDID" || true
            xcrun simctl erase "$UDID" || true
            boot_try "$UDID" || { echo "::error::Simulator failed to boot after retry."; xcrun simctl list devices; exit 1; }
          fi
      
          echo "DEST_ID=$UDID" >> "$GITHUB_ENV"
          echo "UDID=$UDID" >> "$GITHUB_OUTPUT"
      

      - name: Build & Unit Tests (PR plan, no coverage)
        timeout-minutes: 10
        shell: bash
        run: |
          set -eo pipefail
          xcodebuild \
            -scheme "Food Scanner" \
            -testPlan "FoodScanner-PR" \
            -destination "id=$DEST_ID" \
            -destination-timeout 60 \
            -derivedDataPath ./DerivedData \
            CODE_SIGNING_ALLOWED=NO \
            ENABLE_PREVIEWS=NO \
            SWIFT_STRICT_CONCURRENCY=complete \
            OTHER_SWIFT_FLAGS='-warnings-as-errors' \
            -skipPackagePluginValidation \
            -skipMacroValidation \
            -disableAutomaticPackageResolution \
            -skip-testing:FoodScannerUITests \
            test | xcpretty

  lint:
    name: Lint (SwiftFormat + SwiftLint)
    needs: [changes, gate]
    if: ${{ needs.changes.outputs.code == 'true' || needs.changes.outputs.project == 'true' || needs.changes.outputs.linttools == 'true' || needs.changes.outputs.ci == 'true' }}
    runs-on: macos-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - name: Install SwiftLint & SwiftFormat
        run: brew install swiftlint swiftformat
      - name: SwiftFormat (lint only)
        run: |
          swiftformat --lint "Food Scanner"
          swiftformat --lint "FoodScannerTests"
          swiftformat --lint "FoodScannerUITests"
      - name: SwiftLint (strict)
        run: swiftlint --strict

  guards:
    name: Guards (no TODO/FIXME, no legacy APIs)
    needs: [changes, gate]
    if: ${{ needs.changes.outputs.code == 'true' || needs.changes.outputs.project == 'true' || needs.changes.outputs.ci == 'true' }}
    runs-on: macos-latest
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v4
      - name: Fail on TODO/FIXME
        run: |
          if grep -RIn --exclude-dir=.build --exclude-dir=DerivedData -E 'TODO|FIXME' "Food Scanner" FoodScannerTests; then
            echo "::error::Found TODO/FIXME. Please resolve or annotate."; exit 1; fi
      - name: Ban legacy APIs
        run: |
          if grep -RIn -E 'UIWebView|NSURLConnection' "Food Scanner"; then
            echo "::error::Legacy API detected."; exit 1; fi

  codeql:
    name: CodeQL (Swift) — pinned to Xcode 16
    needs: [changes, gate]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' && (needs.changes.outputs.code == 'true' || needs.changes.outputs.project == 'true') }}
    runs-on: macos-latest
    timeout-minutes: 30
    permissions:
      security-events: write
      contents: read
      actions: read
    steps:
      - uses: actions/checkout@v4
      - name: Setup Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'
      - name: Init CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: swift
          build-mode: manual
      - name: Resolve packages
        run: xcodebuild -resolvePackageDependencies -scheme "Food Scanner"
      - name: Build for CodeQL (compile only)
        run: |
          set -eo pipefail
          xcodebuild \
            -scheme "Food Scanner" \
            -sdk iphonesimulator \
            -destination 'generic/platform=iOS Simulator' \
            -destination-timeout 60 \
            -configuration Debug \
            -derivedDataPath ./DerivedData \
            CODE_SIGNING_ALLOWED=NO \
            build | xcpretty
      - name: Analyze
        uses: github/codeql-action/analyze@v3
